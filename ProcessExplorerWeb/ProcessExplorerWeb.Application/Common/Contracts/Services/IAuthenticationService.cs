using ProcessExplorerWeb.Application.Common.Models.Authentication;
using ProcessExplorerWeb.Application.Common.Models.Service;
using ProcessExplorerWeb.Core.Interfaces;
using System;
using System.Threading.Tasks;

namespace ProcessExplorerWeb.Application.Common.Interfaces
{
    /// <summary>
    /// Authentication interface
    /// </summary>
    public interface IAuthenticationService
    {
        /// <summary>
        /// Check user credentials
        /// </summary>
        /// <param name="identifier">User identifier (Id or email or username)</param>
        /// <param name="password">user password</param>
        /// <returns>Instance of IResult</returns>
        Task<Result> UserCredentialsValid(string identifier, string password);

        /// <summary>
        /// Get user by Id or email or username
        /// </summary>
        /// <param name="identifier">Id or email or password</param>
        /// <returns>Instance of IProcessExplorerUser</returns>
        Task<IProcessExplorerUser> GetUserByIdentifier(string identifier);

        /// <summary>
        /// Generate JWT token using user information
        /// </summary>
        /// <param name="identifier">Id or email or password</param>
        /// <returns>Instnace of TokenInfo</returns>
        Task<TokenModel> GenerateJwtToken(string identifier);

        /// <summary>
        /// Normal user registration
        /// </summary>
        /// <param name="username">username</param>
        /// <param name="email">email</param>
        /// <param name="password">password</param>
        /// <returns>Instance of IResult and IProcessExplorerUser</returns>
        Task<(Result, IProcessExplorerUser)> RegisterUser(string username, string email, string password, string profileImage);

        /// <summary>
        /// Check is JWT token valid 
        /// </summary>
        /// <param name="jwtToken">jwt token</param>
        /// <returns>true if valid, otherwise false</returns>
        Task<bool> IsTokenValid(string jwtToken);

        /// <summary>
        /// Register user session for console application
        /// </summary>
        /// <param name="userName">name of computer (user that loged on computer)</param>
        /// <param name="sesssionId">session id generated by console application</param>
        /// <param name="started">start of session (When did user turn on his computer)</param>
        /// <returns></returns>
        Task RegisterSession(string userName, Guid sesssionId, DateTime started);
    }
}
